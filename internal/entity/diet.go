package entity

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
)

type GeneratedDiet struct {
	ID        uuid.UUID   `json:"id" bson:"_id" jsonschema:"type=string" jsonschema_description:"UUID –ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	UserID    int64       `json:"user_id" bson:"user_id" jsonschema_description:"–ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	ConfigID  uuid.UUID   `json:"config_id" bson:"config_id" jsonschema:"type=string" jsonschema_description:"UUID –ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	DailyDiet []DailyDiet `json:"daily_diet" bson:"daily_diet" jsonschema_description:"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω"`
}

func (d *GeneratedDiet) CollectionName() string {
	return "generated_diets"
}

func (d *GeneratedDiet) SetIDs() {
	d.ID = uuid.New()

	for dailyIdx, dailyDiet := range d.DailyDiet {
		dailyDiet.ID = uuid.New()

		d.DailyDiet[dailyIdx] = dailyDiet
	}
}

type DailyDiet struct {
	ID            uuid.UUID `json:"id" bson:"_id,omitempty" jsonschema:"type=string" jsonschema_description:"UUID –ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	TotalCalories int       `json:"total_calories" bson:"total_calories" jsonschema_description:"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å"`
	TotalPFC      PFC       `json:"total_pfc" bson:"total_pfc" jsonschema_description:"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å"`
	Meals         []Meal    `json:"meals" bson:"meals" jsonschema_description:"–ü—Ä–∏–µ–º—ã –ø–∏—â–∏"`
}

type Meal struct {
	Name     string    `json:"name" bson:"name" jsonschema_description:"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä"`
	Time     string    `json:"time" bson:"time" jsonschema_description:"–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"`
	Calories int       `json:"calories" bson:"calories" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"`
	PFC      PFC       `json:"pfc" bson:"pfc" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"`
	Products []Product `json:"products" bson:"products" jsonschema_description:"–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"`
}

type Product struct {
	Name     string `json:"name" bson:"name" jsonschema_description:"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"`
	Calories int    `json:"calories" bson:"calories" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	PFC      PFC    `json:"pfc" bson:"pfc" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	Weight   int    `json:"weight" bson:"weight" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
}

func (d *DailyDiet) ToMessage() string {
	message := "üçΩÔ∏è *–í–∞—à —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å* üçΩÔ∏è\n\n"
	message += fmt.Sprintf("üî• *–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:* %d –∫–∫–∞–ª\n", d.TotalCalories)
	message += fmt.Sprintf("ü•© *–ë–µ–ª–∫–∏:* %.1f –≥\n", d.TotalPFC.Proteins)
	message += fmt.Sprintf("üßà *–ñ–∏—Ä—ã:* %.1f –≥\n", d.TotalPFC.Fats)
	message += fmt.Sprintf("üçö *–£–≥–ª–µ–≤–æ–¥—ã:* %.1f –≥\n\n", d.TotalPFC.Carbs)

	for i, meal := range d.Meals {
		message += fmt.Sprintf("*%s (%s)* - %d –∫–∫–∞–ª\n", meal.Name, meal.Time, meal.Calories)
		message += fmt.Sprintf("–ë: %.1f–≥, –ñ: %.1f–≥, –£: %.1f–≥\n\n",
			meal.PFC.Proteins, meal.PFC.Fats, meal.PFC.Carbs)

		message += "*–ü—Ä–æ–¥—É–∫—Ç—ã:*\n"
		for j, product := range meal.Products {
			message += fmt.Sprintf("%d. %s - %d–≥ (%d –∫–∫–∞–ª)\n",
				j+1, product.Name, product.Weight, product.Calories)
		}

		if i < len(d.Meals)-1 {
			message += "\n" + strings.Repeat("‚Äî", 20) + "\n\n"
		}
	}

	return message
}
