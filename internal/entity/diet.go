package entity

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
)

type GeneratedDiet struct {
	ID            uuid.UUID      `json:"id" bson:"_id" jsonschema:"type=string" jsonschema_description:"UUID –ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	UserID        int64          `json:"user_id" bson:"user_id" jsonschema_description:"–ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	ConfigID      uuid.UUID      `json:"config_id" bson:"config_id" jsonschema:"type=string" jsonschema_description:"UUID –ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	DailyDiet     []DailyDiet    `json:"daily_diet" bson:"daily_diet" jsonschema_description:"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω"`
	ProductsToBuy []ProductToBuy `json:"products_to_buy" bson:"products_to_buy" jsonschema_description:"–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞"`
}

func (d *GeneratedDiet) CollectionName() string {
	return "generated_diets"
}

func (d *GeneratedDiet) SetIDs() {
	d.ID = uuid.New()

	for dailyIdx, dailyDiet := range d.DailyDiet {
		dailyDiet.ID = uuid.New()

		d.DailyDiet[dailyIdx] = dailyDiet
	}
}

type DailyDiet struct {
	ID            uuid.UUID `json:"id" bson:"_id,omitempty" jsonschema:"type=string" jsonschema_description:"UUID –ó–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ"`
	TotalCalories int       `json:"total_calories" bson:"total_calories" jsonschema_description:"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å"`
	TotalPFC      PFC       `json:"total_pfc" bson:"total_pfc" jsonschema_description:"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å"`
	Meals         []Meal    `json:"meals" bson:"meals" jsonschema_description:"–ü—Ä–∏–µ–º—ã –ø–∏—â–∏"`
}

type Meal struct {
	Name     string `json:"name" bson:"name" jsonschema_description:"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä"`
	Time     string `json:"time" bson:"time" jsonschema_description:"–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"`
	Calories int    `json:"calories" bson:"calories" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"`
	PFC      PFC    `json:"pfc" bson:"pfc" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"`
	Dishes   []Dish `json:"dishes" bson:"dishes" jsonschema_description:"–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∏–µ–º –ø–∏—â–∏"`
}

type DishWeightType string

const (
	DishWeightTypeDry    DishWeightType = "—Å—É—Ö–æ–π"
	DishWeightTypeCooked DishWeightType = "–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π"
)

type Dish struct {
	Name        string         `json:"name" bson:"name" jsonschema_description:"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"`
	Calories    int            `json:"calories" bson:"calories" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	PFC         PFC            `json:"pfc" bson:"pfc" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	Weight      int            `json:"weight" bson:"weight" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	WeightUnits string         `json:"weight_units" bson:"weight_units" jsonschema_description:"–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	WeightType  DishWeightType `json:"weight_type" bson:"weight_type" jsonschema_description:"–¢–∏–ø –≤–µ—Å–∞ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ" jsonschema:"enum=—Å—É—Ö–æ–π,enum=–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π"`
}

type ProductToBuyType string

const (
	ProductToBuyTypeVegetables  ProductToBuyType = "–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã"
	ProductToBuyTypeMilk        ProductToBuyType = "–ú–æ–ª–æ—á–∫–∞"
	ProductToBuyTypeMeatAndFish ProductToBuyType = "–ú—è—Å–æ –∏ —Ä—ã–±–∞"
	ProductToBuyTypeCereals     ProductToBuyType = "–ö—Ä—É–ø—ã"
	ProductToBuyTypeAdditional  ProductToBuyType = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
)

var ProductToBuySort = []ProductToBuyType{
	ProductToBuyTypeVegetables,
	ProductToBuyTypeMilk,
	ProductToBuyTypeMeatAndFish,
	ProductToBuyTypeCereals,
	ProductToBuyTypeAdditional,
}

type ProductToBuy struct {
	Name   string `json:"name" bson:"name" jsonschema_description:"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"`
	Weight int    `json:"weight" bson:"weight" jsonschema_description:"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –≤ –ø—Ä–æ–¥—É–∫—Ç–µ"`
	Type   string `json:"type" bson:"type" jsonschema_description:"–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞" jsonschema:"enum=–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã,enum=–ú–æ–ª–æ—á–∫–∞,enum=–ú—è—Å–æ –∏ —Ä—ã–±–∞,enum=–ö—Ä—É–ø—ã,enum=–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"`
}

func (d *DailyDiet) ToMessage() string {
	message := "üçΩÔ∏è *–í–∞—à —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å* üçΩÔ∏è\n\n"
	message += fmt.Sprintf("üî• *–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:* %d –∫–∫–∞–ª\n", d.TotalCalories)
	message += fmt.Sprintf("ü•© *–ë–µ–ª–∫–∏:* %.1f –≥\n", d.TotalPFC.Proteins)
	message += fmt.Sprintf("üßà *–ñ–∏—Ä—ã:* %.1f –≥\n", d.TotalPFC.Fats)
	message += fmt.Sprintf("üçö *–£–≥–ª–µ–≤–æ–¥—ã:* %.1f –≥\n\n", d.TotalPFC.Carbs)

	for i, meal := range d.Meals {
		timeEmoji := timeToNumberEmoji(meal.Time)
		message += fmt.Sprintf("*%s %s - %d –∫–∫–∞–ª\n", meal.Name, timeEmoji, meal.Calories)
		message += fmt.Sprintf("ü•© %.1f–≥, üßà %.1f–≥, üçö %.1f–≥\n\n",
			meal.PFC.Proteins, meal.PFC.Fats, meal.PFC.Carbs)

		message += "*–ü—Ä–æ–¥—É–∫—Ç—ã:*\n"
		for _, dish := range meal.Dishes {
			weightTypeInfo := ""
			if dish.WeightType == DishWeightTypeDry {
				weightTypeInfo = " (—Å—É—Ö–æ–π)"
			}

			message += fmt.Sprintf("üç≤ %s - %d %s%s (%d –∫–∫–∞–ª)\n",
				dish.Name, dish.Weight, dish.WeightUnits, weightTypeInfo, dish.Calories)
		}

		if i < len(d.Meals)-1 {
			message += "\n" + strings.Repeat("‚Äî", 20) + "\n\n"
		}
	}

	return message
}

func timeToNumberEmoji(timeStr string) string {
	emojiMap := map[rune]string{
		'0': "0Ô∏è‚É£",
		'1': "1Ô∏è‚É£",
		'2': "2Ô∏è‚É£",
		'3': "3Ô∏è‚É£",
		'4': "4Ô∏è‚É£",
		'5': "5Ô∏è‚É£",
		'6': "6Ô∏è‚É£",
		'7': "7Ô∏è‚É£",
		'8': "8Ô∏è‚É£",
		'9': "9Ô∏è‚É£",
		':': ":",
	}

	result := ""
	for _, char := range timeStr {
		if emoji, exists := emojiMap[char]; exists {
			result += emoji
		} else {
			result += string(char)
		}
	}

	return result
}
