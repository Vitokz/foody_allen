package creatediet

import (
	"context"
	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"diet_bot/internal/entity"
	"diet_bot/internal/flow"
)

// Define a food category configuration struct
type FillConfig struct {
	State       string
	NextEvent   string
	PromptText  string
	ExampleText string
	FieldSetter func(config *entity.DietConfiguration, value string) error
}

var dietFillmentFlow = []FillConfig{
	{
		State:     "-",
		NextEvent: flow.EventCreateDiet,
		PromptText: `üöÄ –ù—É —à—Ç–æ—à –Ω–∞—á–Ω–µ–º

–û–ø–∏—à–∏ —Å–≤–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.`,
		ExampleText: `–†–∞–±–æ—Ç–∞—é –≤ –æ—Ñ–∏—Å–µ, —Å–∏–∂—É –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –í –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–∂—É –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –∫–º. 
–ó–∞–Ω–∏–º–∞—é—Å—å –∫—Ä–æ—Å—Å—Ñ–∏—Ç–æ–º 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ 2-3 —á–∞—Å–∞ –∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			config.LifestyleAndWorkouts = value
			return nil
		},
	},
	{
		State:     flow.StateCreateDiet_LifeStyle,
		NextEvent: flow.EventCreateDietTimeRestrictions,
		PromptText: `üöÄ –ù—É —à—Ç–æ—à –Ω–∞—á–Ω–µ–º

–û–ø–∏—à–∏ —Å–≤–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.`,
		ExampleText: `–†–∞–±–æ—Ç–∞—é –≤ –æ—Ñ–∏—Å–µ, —Å–∏–∂—É –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –í –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–∂—É –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –∫–º. 
–ó–∞–Ω–∏–º–∞—é—Å—å –∫—Ä–æ—Å—Å—Ñ–∏—Ç–æ–º 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ 2-3 —á–∞—Å–∞ –∫–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			config.LifestyleAndWorkouts = value
			return nil
		},
	},
	{
		State:       flow.StateCreateDiet_TimeRestrictions,
		NextEvent:   flow.EventCreateDietPFC,
		PromptText:  `–ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏?`,
		ExampleText: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å 18:00 –¥–æ 21:00, –ø–æ-—ç—Ç–æ–º—É –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è.`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			config.TimeRestrictions = value
			return nil
		},
	},
	{
		State:     flow.StateCreateDiet_PFC,
		NextEvent: flow.EventCreateDietCalories,
		PromptText: `–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.

–§–æ—Ä–º–∞—Ç: 30/30/40`,
		ExampleText: `20/30/50`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			if err := config.PFC.ParsePFC(value); err != nil {
				return err
			}
			return nil
		},
	},
	{
		State:     flow.StateCreateDiet_Calories,
		NextEvent: flow.EventCreateDietNutritionPrinciples,
		PromptText: `–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤ –¥–µ–Ω—å?

–§–æ—Ä–º–∞—Ç: 2000`,
		ExampleText: `3250`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			calories, err := strconv.Atoi(value)
			if err != nil {
				return err
			}
			config.Calories = calories
			return nil
		},
	},
	{
		State:     flow.StateCreateDiet_NutritionPrinciples,
		NextEvent: flow.EventCreateDietIndividualRestrictions,
		PromptText: `–ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø–∏—Ç–∞–Ω–∏—è —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å?

–§–æ—Ä–º–∞—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π, –Ω–æ —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–∏–Ω—Ü–∏–ø—ã.`,
		ExampleText: `1. –ë–µ–∑ –ø–µ—Ä–µ–∫—É—Å–æ–≤.
2. –î—Ä–æ–±–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ 5 –ø—Ä–∏–µ–º–æ–≤.
3. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞.
4. –£–ø–æ—Ä –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –∏ –æ–≤–æ—â–∏.
5. –ó–∞–≤—Ç—Ä–∞–∫ - —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏.`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			config.NutritionPrinciples = value
			return nil
		},
	},
	{
		State:     flow.StateCreateDiet_IndividualRestrictions,
		NextEvent: flow.EventCreateFoodConfiguration,
		PromptText: `–ö–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?

–§–æ—Ä–º–∞—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π, –Ω–æ —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.`,
		ExampleText: `1. –ù–µ –µ—Å—Ç—å –ø–æ—Å–ª–µ 18:00.
2. –ù–µ –µ—Å—Ç—å —Å–ª–∞–¥–∫–æ–µ.
3. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–±–æ–≤—ã–µ
4. –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª–µ–Ω—ã–π –ª—É–∫ –∏ –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü.
5. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –≤–∏–¥–∞ –≥–∞—Ä–Ω–∏—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
6. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 —Ç–∏–ø —Ä—ã–±—ã. –ß—Ç–æ–±—ã –Ω–µ –≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
7. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 —Ç–∏–ø –º—è—Å–∞. –ß—Ç–æ–±—ã –Ω–µ –≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
8. –î–≤–∞ –≤–∏–¥–∞ —Ç—É—à–µ–Ω—ã—Ö –æ–≤–æ—â–µ–π –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª—é–¥. –ß—Ç–æ–±—ã –Ω–µ –≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.`,
		FieldSetter: func(config *entity.DietConfiguration, value string) error {
			config.IndividualRestrictions = value
			return nil
		},
	},
}

// Map state to config for quick lookup
var flowConfigMap map[string]FillConfig

func init() {
	flowConfigMap = make(map[string]FillConfig)
	for _, config := range dietFillmentFlow {
		flowConfigMap[config.State] = config
	}
	for _, config := range foodCategoryFlow {
		flowConfigMap[config.State] = config
	}
}

func (c *Commands) IsFillDiet(ctx context.Context, update *tgbotapi.Update) bool {
	meta := entity.NewMeta(update)

	chat, err := c.repository.GetChat(meta.ChatID)
	if err != nil {
		c.logger.Errorw("Error getting chat", "error", err)
		return false
	}

	ok := flow.IsCreateDietFillState(chat.State)

	if !ok {
		c.logger.Infof("Chat state: %s is not fill diet", chat.State)
	} else {
		c.logger.Infof("Chat state: %s is fill diet", chat.State)
	}

	return ok
}

func (c *Commands) FillDiet(ctx context.Context, update *tgbotapi.Update) tgbotapi.Chattable {
	return c.executeFillment(ctx, flowConfigMap, update)
}

func (c *Commands) executeFillment(
	_ context.Context,
	flowConfig map[string]FillConfig,
	update *tgbotapi.Update,
) tgbotapi.Chattable {
	meta := entity.NewMeta(update)

	chat, err := c.repository.GetChat(meta.ChatID)
	if err != nil {
		c.logger.Errorw("Error getting chat", "error", err)
		return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â–µ —Ä–∞–∑")
	}

	dietConfiguration, err := c.repository.GetDietConfiguration(chat.UserID)
	if err != nil {
		c.logger.Errorw("Error getting diet configuration", "error", err)
		return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â–µ —Ä–∞–∑")
	}

	botFSM := flow.NewBotFSM(chat)

	// Get the config for current state
	config, exists := flowConfig[chat.State]
	if !exists {
		return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
	}

	// Set the field value
	err = config.FieldSetter(dietConfiguration, meta.Message.Text)
	if err != nil {
		return tgbotapi.NewMessage(meta.ChatID, err.Error())
	}

	if config.NextEvent != flow.EventMainMenu {
		if err := botFSM.Event(config.NextEvent); err != nil {
			c.logger.Errorw("Error transitioning to next food category", "error", err)
			return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
		}
	} else {
		botFSM.SetState(flow.StateMenu)
	}

	// Save configuration
	err = c.saveDietConfiguration(chat, dietConfiguration)
	if err != nil {
		return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
	}

	// If this was the last category, complete the flow
	if config.NextEvent == flow.EventMainMenu {
		return tgbotapi.NewMessage(meta.ChatID, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	}

	// Otherwise, transition to the next category
	nextConfig := flowConfig[chat.State]
	// Return prompt for next category
	msg := makeResponseMsg(meta, nextConfig.PromptText, nextConfig.ExampleText)

	return msg
}

func makeResponseMsg(
	meta *entity.TelegramMeta,
	mainText string,
	exampleText string,
) tgbotapi.Chattable {
	msg := tgbotapi.NewMessage(meta.ChatID, "")
	msg.ParseMode = "MarkdownV2"

	mainText = tgbotapi.EscapeText(tgbotapi.ModeMarkdownV2, mainText)
	exampleText = tgbotapi.EscapeText(tgbotapi.ModeMarkdownV2, exampleText)

	msg.Text = fmt.Sprintf("\n‚ùì %s\n\n–ü—Ä–∏–º–µ—Ä:\n```\n%s\n```\n", mainText, exampleText)

	return msg
}

func (c *Commands) saveDietConfiguration(
	chat *entity.Chat,
	dietConfiguration *entity.DietConfiguration,
) error {
	err := c.repository.UpsertDietConfiguration(dietConfiguration)
	if err != nil {
		c.logger.Errorw("Error upserting diet configuration", "error", err)
		return err
	}

	err = c.repository.UpsertChat(chat)
	if err != nil {
		c.logger.Errorw("Error upserting chat", "error", err)
		return err
	}

	return nil
}
