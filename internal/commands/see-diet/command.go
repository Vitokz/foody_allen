package seediet

import (
	"context"
	"diet_bot/internal/entity"
	"diet_bot/internal/flow"
	"diet_bot/internal/repository"
	"fmt"
	"strconv"
	"strings"

	"go.mongodb.org/mongo-driver/mongo"
	"go.uber.org/zap"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type DietCommand struct {
	logger     *zap.SugaredLogger
	repository *repository.Client
}

func NewDietCommand(repository *repository.Client, logger *zap.SugaredLogger) *DietCommand {
	return &DietCommand{
		logger:     logger,
		repository: repository,
	}
}

func (c *DietCommand) SeeDietHandler(ctx context.Context, update *tgbotapi.Update) tgbotapi.Chattable {
	meta := entity.NewMeta(update)

	diet, err := c.repository.GetLatestDiet(meta.UserID)
	if err != nil {
		msg := tgbotapi.NewMessage(meta.ChatID, "–†–∞—Ü–∏–æ–Ω –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("ü•ó –°–æ–∑–¥–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω", flow.CommandGenerateDiet),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", flow.CommandMenu),
			),
		)

		return msg
	}

	msg := tgbotapi.NewMessage(meta.ChatID, "ü•ó –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–∞—Ü–∏–æ–Ω–∞:")

	days := make([]tgbotapi.InlineKeyboardButton, len(diet.DailyDiet))
	for i := range diet.DailyDiet {
		dayNumber := strconv.Itoa(i + 1)
		days[i] = tgbotapi.NewInlineKeyboardButtonData("ü•ó "+dayNumber, dietDayCommand(dayNumber))
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, days)
	backButton := tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", flow.CommandMenu)
	rows = append(rows, []tgbotapi.InlineKeyboardButton{backButton})

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)

	return msg
}

func (c *DietCommand) SeeDietDayHandler(ctx context.Context, update *tgbotapi.Update) tgbotapi.Chattable {
	meta := entity.NewMeta(update)

	dayNumber, err := getDietDayFromCommand(update.CallbackQuery.Data)
	if err != nil {
		c.logger.Error("error getting diet day", zap.Error(err))
		return nil
	}

	diet, err := c.repository.GetLatestDiet(meta.UserID)
	if err != nil {
		c.logger.Error("error getting diet", zap.Error(err))
		return nil
	}

	day := diet.DailyDiet[dayNumber-1]
	msg := tgbotapi.NewMessage(meta.ChatID, day.ToMessage())
	msg.ParseMode = tgbotapi.ModeMarkdown

	backButton := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", flow.CommandSeeDiet),
		),
	)

	msg.ReplyMarkup = backButton

	return msg
}

func (c *DietCommand) SeeDietProductsHandler(ctx context.Context, update *tgbotapi.Update) tgbotapi.Chattable {
	meta := entity.NewMeta(update)

	diet, err := c.repository.GetLatestDiet(meta.UserID)
	if err != nil && err != mongo.ErrNoDocuments {
		c.logger.Error("error getting diet", zap.Error(err))
		return nil
	}

	if err == mongo.ErrNoDocuments {
		msg := tgbotapi.NewMessage(meta.ChatID, "–†–∞—Ü–∏–æ–Ω –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("ü•ó –°–æ–∑–¥–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω", flow.CommandGenerateDiet),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", flow.CommandMenu),
			),
		)

		return msg
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	productsByType := make(map[entity.ProductToBuyType][]entity.ProductToBuy)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
	for _, product := range diet.ProductsToBuy {
		productType := entity.ProductToBuyType(product.Type)
		productsByType[productType] = append(productsByType[productType], product)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–ª–µ–¥—É—è –ø–æ—Ä—è–¥–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ ProductToBuySort
	var messageBuilder strings.Builder
	messageBuilder.WriteString("üõí *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:*\n\n")

	totalProducts := 0 // –°—á–µ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤

	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	for _, category := range entity.ProductToBuySort {
		products := productsByType[category]
		if len(products) == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–º–æ–¥–∑–∏
		emoji := getCategoryEmoji(category)
		messageBuilder.WriteString(fmt.Sprintf("*%s %s:*\n", emoji, category))

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		for _, product := range products {
			weight := product.Weight
			unit := "–≥"

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ –≤–µ—Å–∞ –≤ –∫–≥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
			if weight >= 1000 {
				weight = weight / 1000
				unit = "–∫–≥"
			}

			messageBuilder.WriteString(fmt.Sprintf("‚Ä¢ %s ‚Äî %d%s\n", product.Name, weight, unit))
			totalProducts++
		}

		messageBuilder.WriteString("\n")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	messageBuilder.WriteString(fmt.Sprintf("*–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:* %d\n", totalProducts))

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	msg := tgbotapi.NewMessage(meta.ChatID, messageBuilder.String())
	msg.ParseMode = tgbotapi.ModeMarkdown

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
	backButton := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", flow.CommandMenu),
		),
	)
	msg.ReplyMarkup = backButton

	return msg
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func getCategoryEmoji(category entity.ProductToBuyType) string {
	switch category {
	case entity.ProductToBuyTypeVegetables:
		return "ü•¶"
	case entity.ProductToBuyTypeMilk:
		return "ü•õ"
	case entity.ProductToBuyTypeMeatAndFish:
		return "ü•©"
	case entity.ProductToBuyTypeCereals:
		return "üåæ"
	case entity.ProductToBuyTypeAdditional:
		return "üßÇ"
	default:
		return "üìã"
	}
}

func dietDayCommand(dayNumber string) string {
	return flow.CommandSeeDietDay + dayNumber
}

func getDietDayFromCommand(command string) (int, error) {
	parts := strings.Split(command, "_")

	dayNumber, err := strconv.Atoi(parts[len(parts)-1])
	if err != nil {
		return 0, err
	}

	return dayNumber, nil
}

func CommandHasDietDay(command string) bool {
	return strings.HasPrefix(command, flow.CommandSeeDietDay)
}
