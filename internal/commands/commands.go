package commands

import (
	"context"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"

	filldiet "diet_bot/internal/commands/fill-diet"
	generatediet "diet_bot/internal/commands/generate-diet"
	seediet "diet_bot/internal/commands/see-diet"
	"diet_bot/internal/entity"
	"diet_bot/internal/flow"
)

type Commands struct {
	*filldiet.Commands
	*generatediet.Command
	*seediet.DietCommand
	logger     *zap.SugaredLogger
	repository Repository
}

func NewCommands(repository Repository, aiClient generatediet.AIClient, logger *zap.SugaredLogger) *Commands {
	return &Commands{
		Commands:    filldiet.NewCommands(repository, logger),
		Command:     generatediet.NewCommand(repository, aiClient, logger),
		DietCommand: seediet.NewDietCommand(repository, logger),
		repository:  repository,
		logger:      logger,
	}
}

const (
	StartCommand = `
–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç FoodyAlen. –Ø –ª–∏—á–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞.

–í–æ—Ç –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —è –º–æ–≥—É —Ä–µ—à–∏—Ç—å:
1. –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –ë–ñ–£ –∏ –ö–∞–ª–æ—Ä–∏–π. 
2. –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é, —á—Ç–æ–±—ã –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, —É–ø–∞–∫–æ–≤–∞—Ç—å, –∞ –ø–æ—Ç–æ–º —Å—ä–µ—Å—Ç—å.

–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Ü–∏–æ–Ω–∞, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–±–ª–∏–∂–µ üëâüëà.

–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Ü–∏–æ–Ω–∞, —ç—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç.
`
)

func (c *Commands) StartHandler(ctx context.Context, update *tgbotapi.Update) tgbotapi.Chattable {
	meta := entity.NewMeta(update)

	user := entity.User{
		ID:           meta.Message.From.ID,
		Username:     meta.Message.From.UserName,
		FirstName:    meta.Message.From.FirstName,
		LastName:     meta.Message.From.LastName,
		LanguageCode: meta.Message.From.LanguageCode,
		IsBot:        meta.Message.From.IsBot,
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}

	chat := entity.Chat{
		ID:     meta.ChatID,
		State:  flow.StateStart,
		UserID: user.ID,
	}

	err := c.repository.UpsertUser(&user)
	if err != nil {
		c.logger.Errorw("Error saving user", "error", err)
		return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â–µ —Ä–∞–∑")
	}

	err = c.repository.UpsertChat(&chat)
	if err != nil {
		c.logger.Errorw("Error saving chat", "error", err)
		return tgbotapi.NewMessage(meta.ChatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â–µ —Ä–∞–∑")
	}

	button := tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", flow.CommandFillConfig)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
	msg := tgbotapi.NewMessage(meta.ChatID, StartCommand)
	msg.ReplyMarkup = keyboard

	return msg
}
