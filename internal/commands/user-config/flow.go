package userconfig

import (
	"context"
	"diet_bot/internal/entity"
	"diet_bot/internal/flow"
	"errors"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type FillConfig struct {
	CurrentState      string
	NextEvent         string
	PromptMessage     func(chatID int64) tgbotapi.Chattable
	Validation        func(chatID int64, value string) tgbotapi.Chattable
	FieldSetter       func(config *entity.UserConfiguration, value string) (response *string, err error)
	IsWaitingCallback bool
}

var fillConfig = []FillConfig{
	{
		CurrentState: flow.StateUserConfiguration_Height,
		NextEvent:    flow.EventUserConfigurationWeight,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			return tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö")
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			height, err := strconv.Atoi(value)
			if err != nil {
				return tgbotapi.NewMessage(chatID, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–æ—Ç —ç—Ç–∏ –∫—Ä–∞–∫–∞–∑—è–±—Ä—ã —Å–µ–±–µ –æ—Å—Ç–∞–≤—å")
			}

			if height < 50 || height > 250 {
				return tgbotapi.NewMessage(chatID, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50-250 —Å–º")
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			height, err := strconv.Atoi(value)
			if err != nil {
				return nil, errors.New("—Ä–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			}

			config.Height = height

			response := fmt.Sprintf("–†–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d —Å–º", height)

			return &response, nil
		},
	},
	{
		CurrentState: flow.StateUserConfiguration_Weight,
		NextEvent:    flow.EventUserConfigurationGender,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			return tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö")
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			value = strings.ReplaceAll(value, ",", ".")
			weight, err := strconv.ParseFloat(value, 64)
			if err != nil {
				return tgbotapi.NewMessage(chatID, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–æ—Ç —ç—Ç–∏ –∫—Ä–∞–∫–∞–∑—è–±—Ä—ã —Å–µ–±–µ –æ—Å—Ç–∞–≤—å")
			}

			if weight < 35 || weight > 300 {
				return tgbotapi.NewMessage(chatID, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 35-300 –∫–≥")
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			value = strings.ReplaceAll(value, ",", ".")
			weight, err := strconv.ParseFloat(value, 64)
			if err != nil {
				return nil, errors.New("–≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			}

			config.Weight = weight
			response := fmt.Sprintf("–í–µ—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %.2f –∫–≥", weight)
			return &response, nil
		},
	},
	{
		CurrentState: flow.StateUserConfiguration_Gender,
		NextEvent:    flow.EventUserConfigurationAge,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			msg := tgbotapi.NewMessage(chatID, "üëá –í—ã–±–µ—Ä–∏ –ø–æ–ª")
			replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüíº –ú—É–∂—Å–∫–æ–π", flow.CommandFillUserConfigGenderMale),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üë©‚Äçüíº –ñ–µ–Ω—Å–∫–∏–π", flow.CommandFillUserConfigGenderFemale),
				),
			)
			msg.ReplyMarkup = &replyMarkup

			return msg
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			if !isGenderFillCommand(value) {
				msg := tgbotapi.NewMessage(chatID, "üëá –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
				replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüíº –ú—É–∂—Å–∫–æ–π", flow.CommandFillUserConfigGenderMale),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üë©‚Äçüíº –ñ–µ–Ω—Å–∫–∏–π", flow.CommandFillUserConfigGenderFemale),
					),
				)
				msg.ReplyMarkup = &replyMarkup

				return msg
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			config.Gender = getGenderFromCommand(value)
			response := fmt.Sprintf("–ü–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", entity.GenderToText(config.Gender))
			return &response, nil
		},
		IsWaitingCallback: true,
	},
	{
		CurrentState: flow.StateUserConfiguration_Age,
		NextEvent:    flow.EventUserConfigurationGoal,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			return tgbotapi.NewMessage(chatID, "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			age, err := strconv.Atoi(value)
			if err != nil {
				return tgbotapi.NewMessage(chatID, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º! –¢—ã –≥–¥–µ —Ç–∞–∫–∏–µ —á–∏—Å–ª–∞ –≤–∏–¥–µ–ª????")
			}

			if age < 12 || age > 100 {
				return tgbotapi.NewMessage(chatID, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 12-100 –ª–µ—Ç")
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			age, err := strconv.Atoi(value)
			if err != nil {
				return nil, errors.New("–≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
			}

			config.Age = age
			response := fmt.Sprintf("–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –ª–µ—Ç", age)
			return &response, nil
		},
	},
	{
		CurrentState: flow.StateUserConfiguration_Goal,
		NextEvent:    flow.EventUserConfigurationActivity,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			msg := tgbotapi.NewMessage(chatID, "üëá –ö–∞–∫—É—é —Ü–µ–ª—å –ø—Ä–µ—Å–ª–µ–¥—É–µ—à—å?")
			replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚öñÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", flow.CommandFillDietGoalLoseWeight),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üí™ –ë—ã—Ç—å –≤ —Ñ–æ—Ä–º–µ", flow.CommandFillDietGoalMaintainWeight),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", flow.CommandFillDietGoalGainWeight),
				),
			)
			msg.ReplyMarkup = &replyMarkup

			return msg
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			if !isGoalFillCommand(value) {
				msg := tgbotapi.NewMessage(chatID, "üëá –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
				replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚öñÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", flow.CommandFillDietGoalLoseWeight),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üí™ –ë—ã—Ç—å –≤ —Ñ–æ—Ä–º–µ", flow.CommandFillDietGoalMaintainWeight),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", flow.CommandFillDietGoalGainWeight),
					),
				)
				msg.ReplyMarkup = &replyMarkup

				return msg
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			config.Goal = getGoalFromCommand(value)
			response := fmt.Sprintf("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %s", entity.GoalToText(config.Goal))

			return &response, nil
		},
		IsWaitingCallback: true,
	},
	{
		CurrentState: flow.StateUserConfiguration_Activity,
		NextEvent:    flow.EventUserConfigurationDietType,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			msg := tgbotapi.NewMessage(chatID, `
üëá –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:

ü™ë –°–∏–¥—è—á–∏–π ‚Äî –º–∞–ª–æ –¥–≤–∏–≥–∞—é—Å—å, —Ä–∞–±–æ—Ç–∞—é –≤ –æ—Ñ–∏—Å–µ.
üèÉ‚Äç‚ôÇÔ∏è –ú–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º.
üèãÔ∏è‚Äç‚ôÇÔ∏è –£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º.
üí™ –ê–∫—Ç–∏–≤–Ω—ã–π ‚Äî 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º.
ü¶æ –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞.
		`)
			replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("ü™ë –°–∏–¥—è—á–∏–π", flow.CommandFillUserConfigActivitySedentary),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üèÉ‚Äç‚ôÇÔ∏è –ú–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityLow),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üèãÔ∏è‚Äç‚ôÇÔ∏è –£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityMedium),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üí™ –ê–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityHigh),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("ü¶æ –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityVeryHigh),
				),
			)
			msg.ReplyMarkup = &replyMarkup

			return msg
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			if !isActivityFillCommand(value) {
				msg := tgbotapi.NewMessage(chatID, "üëá –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
				replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("ü™ë –°–∏–¥—è—á–∏–π", flow.CommandFillUserConfigActivitySedentary),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üèÉ‚Äç‚ôÇÔ∏è –ú–∞–ª–æ–∞–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityLow),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üèãÔ∏è‚Äç‚ôÇÔ∏è –£–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityMedium),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üí™ –ê–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityHigh),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("ü¶æ –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π", flow.CommandFillUserConfigActivityVeryHigh),
					),
				)
				msg.ReplyMarkup = &replyMarkup

				return msg
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			config.Activity = getActivityFromCommand(value)

			response := fmt.Sprintf("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %s", entity.ActivityToText(config.Activity))

			return &response, nil
		},
		IsWaitingCallback: true,
	},
	{
		CurrentState: flow.StateUserConfiguration_DietType,
		NextEvent:    flow.EventUserConfigurationAllergies,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			msg := tgbotapi.NewMessage(chatID, `
–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç—ã —Å–ª–µ–¥—É–µ—à—å –∫–∞–∫–æ–π-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–π –¥–∏–µ—Ç–µ? 

üëá –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:
`)
			replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç, –Ω–µ —Å–ª–µ–¥—É—é", flow.CommandFillUserConfigDietTypeAnything),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ö–µ—Ç–æ", flow.CommandFillUserConfigDietTypeKeto),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ü–∞–ª–µ–æ", flow.CommandFillUserConfigDietTypePaleo),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–í–µ–≥–∞–Ω", flow.CommandFillUserConfigDietTypeVegan),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", flow.CommandFillUserConfigDietTypeVegetarian),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è", flow.CommandFillUserConfigDietTypeMediterranean),
				),
			)
			msg.ReplyMarkup = &replyMarkup

			return msg
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			if !isDietTypeFillCommand(value) {
				msg := tgbotapi.NewMessage(chatID, "üëá –í—ã–±–µ—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
				replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç, –Ω–µ —Å–ª–µ–¥—É—é", flow.CommandFillUserConfigDietTypeAnything),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ö–µ—Ç–æ", flow.CommandFillUserConfigDietTypeKeto),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ü–∞–ª–µ–æ", flow.CommandFillUserConfigDietTypePaleo),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–í–µ–≥–∞–Ω", flow.CommandFillUserConfigDietTypeVegan),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", flow.CommandFillUserConfigDietTypeVegetarian),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è", flow.CommandFillUserConfigDietTypeMediterranean),
					),
				)
				msg.ReplyMarkup = &replyMarkup

				return msg
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			config.DietType = getDietTypeFromCommand(value)
			response := fmt.Sprintf("–¢–∏–ø –¥–∏–µ—Ç—ã: %s", entity.DietTypeToText(config.DietType))
			return &response, nil
		},
		IsWaitingCallback: true,
	},
	{
		CurrentState: flow.StateUserConfiguration_Allergies,
		NextEvent:    flow.EventUserConfigurationMealTypes,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			return tgbotapi.NewMessage(chatID, `
‚úçÔ∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø–∏—â–µ–≤–∞—è –∞–ª–ª–µ—Ä–≥–∏—è?
			
	1. –ì–ª—é—Ç–µ–Ω
	2. –ê—Ä–∞—Ö–∏—Å
	3. –Ø–π—Ü–∞
	4. –†—ã–±–∞
	5. –û—Ä–µ—Ö–∏
	6. –ú–æ–ª–æ—á–∫–∞
	7. –°–æ—è
	8. –†–∞–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ
			
–ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –Ω–∞–ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:

"–≥–ª—é—Ç–µ–Ω, –∞—Ä–∞—Ö–∏—Å, —è–π—Ü–∞" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–≥–ª—é—Ç–µ–Ω"

–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç—É, –ø–∏—à–∏ "–Ω–µ—Ç".
		`)
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			if value == "–Ω–µ—Ç" {
				return nil
			}

			_, err := entity.AllergensFromTextToEntity(value)
			if err != nil {
				return tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: '–≥–ª—é—Ç–µ–Ω,–∞—Ä–∞—Ö–∏—Å,—è–π—Ü–∞'")
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			response := fmt.Sprintf("–ê–ª–ª–µ—Ä–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: %s", value)

			if value == "–Ω–µ—Ç" {
				config.Allergies = nil
				return &response, nil
			}

			allergies, err := entity.AllergensFromTextToEntity(value)
			if err != nil {
				return nil, err
			}

			config.Allergies = allergies

			return &response, nil
		},
	},
	{
		CurrentState: flow.StateUserConfiguration_MealTypes,
		NextEvent:    flow.EventMainMenu,
		PromptMessage: func(chatID int64) tgbotapi.Chattable {
			return tgbotapi.NewMessage(chatID, `
‚úçÔ∏è –í–≤–µ–¥–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏. 
			
	–í–∞—Ä–∏–∞–Ω—Ç—ã:
	1. –ó–∞–≤—Ç—Ä–∞–∫
	2. –û–±–µ–¥
	3. –£–∂–∏–Ω
	4. –ü–µ—Ä–µ–∫—É—Å

–ù–∞–ø—Ä–∏–º–µ—Ä:

"–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω"
`)
		},
		Validation: func(chatID int64, value string) tgbotapi.Chattable {
			meals, err := entity.MealTypesFromTextToEntity(value)
			if err != nil {
				return tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–≤—Ç—Ä–∞–∫,–æ–±–µ–¥,—É–∂–∏–Ω'")
			}

			if len(meals) == 0 {
				return tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–≤—Ç—Ä–∞–∫,–æ–±–µ–¥,—É–∂–∏–Ω'")
			}

			return nil
		},
		FieldSetter: func(config *entity.UserConfiguration, value string) (*string, error) {
			meals, err := entity.MealTypesFromTextToEntity(value)
			if err != nil {
				return nil, err
			}

			config.MealTypes = meals

			response := fmt.Sprintf("–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: %s", value)
			return &response, nil
		},
	},
}

var flowConfigMap map[string]FillConfig

func init() {
	flowConfigMap = make(map[string]FillConfig)
	for _, config := range fillConfig {
		flowConfigMap[config.CurrentState] = config
	}
}

func (c *Commands) IsFillUserConfigurationFlow(update *tgbotapi.Update) bool {
	meta := entity.NewMeta(update)

	chat, err := c.repository.GetChat(meta.ChatID)
	if err != nil {
		c.logger.Errorw("Error getting chat", "error", err)
		return false
	}

	ok := flow.IsCreateUserConfigurationFillState(chat.State)

	if !ok {
		c.logger.Infof("Chat state: %s is not fill user configuration", chat.State)
	} else {
		c.logger.Infof("Chat state: %s is fill user configuration", chat.State)
	}

	return ok
}

func (c *Commands) ExecuteFillment(
	ctx context.Context,
	update *tgbotapi.Update,
) []tgbotapi.Chattable {
	meta := entity.NewMeta(update)

	// 1. Get chat
	chat, err := c.repository.GetChat(meta.ChatID)
	if err != nil {
		c.logger.Errorw("error getting chat", "error", err)
		return []tgbotapi.Chattable{
			tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start –µ—â–µ —Ä–∞–∑"),
		}
	}

	// 2. Get user config
	userConfig, err := c.repository.GetUserConfiguration(chat.UserID)
	if err != nil {
		c.logger.Errorw("error getting user configuration", "error", err)
		return []tgbotapi.Chattable{
			tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ /start –µ—â–µ —Ä–∞–∑"),
		}
	}

	// 3. Get config for current state
	config, exists := flowConfigMap[chat.State]
	if !exists {
		return []tgbotapi.Chattable{
			tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
		}
	}

	// 4. Validate input
	if config.IsWaitingCallback {
		if meta.CallbackData == nil {
			c.logger.Error("error expected not nil callback data")

			return []tgbotapi.Chattable{
				config.Validation(meta.ChatID, meta.Message.Text),
			}
		}

		if errMsg := config.Validation(meta.ChatID, *meta.CallbackData); errMsg != nil {
			return []tgbotapi.Chattable{
				errMsg,
			}
		}
	} else {
		if errMsg := config.Validation(meta.ChatID, meta.Message.Text); errMsg != nil {
			return []tgbotapi.Chattable{
				errMsg,
			}
		}
	}

	// 5. Set field value
	var userChoice string
	if config.IsWaitingCallback {
		if meta.CallbackData == nil {
			c.logger.Error("error expected not nil callback data")
			return []tgbotapi.Chattable{
				tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"),
			}
		}
		userChoice = *meta.CallbackData
		response, err := config.FieldSetter(userConfig, userChoice)
		if err != nil {
			return []tgbotapi.Chattable{
				tgbotapi.NewMessage(meta.ChatID, err.Error()),
			}
		}
		userChoice = *response
	} else {
		userChoice = meta.Message.Text
		response, err := config.FieldSetter(userConfig, userChoice)
		if err != nil {
			return []tgbotapi.Chattable{
				tgbotapi.NewMessage(meta.ChatID, err.Error()),
			}
		}
		userChoice = *response
	}

	// 6. Save changes
	if err := c.repository.SaveUserConfiguration(userConfig); err != nil {
		c.logger.Errorw("error saving user configuration", "error", err)
		return []tgbotapi.Chattable{
			tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"),
		}
	}

	messages := []tgbotapi.Chattable{}

	// Edit previous message with user's choice
	if !config.IsWaitingCallback {
		deleteMsg := tgbotapi.NewDeleteMessage(meta.ChatID, meta.Message.MessageID)
		editMsg := tgbotapi.NewEditMessageText(meta.ChatID, meta.Message.MessageID-1, fmt.Sprintf("‚úÖ %s", userChoice))

		messages = append(messages, deleteMsg, editMsg)
	} else {
		editMsg := tgbotapi.NewEditMessageText(meta.ChatID, meta.Message.MessageID, fmt.Sprintf("‚úÖ %s", userChoice))
		messages = append(messages, editMsg)
	}

	// 7. Transition to next state
	botFSM := flow.NewBotFSM(chat)
	if config.NextEvent == flow.EventMainMenu {
		if err := botFSM.Event(flow.EventMainMenu); err != nil {
			c.logger.Errorw("error transitioning to main menu", "error", err)
			return []tgbotapi.Chattable{
				tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"),
			}
		}

		if err := c.repository.UpsertChat(chat); err != nil {
			c.logger.Errorw("error saving chat", "error", err)
			return []tgbotapi.Chattable{
				tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"),
			}
		}

		msg := tgbotapi.NewMessage(meta.ChatID, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
		messages = append(messages, msg)

		return messages
	}

	if err := botFSM.Event(config.NextEvent); err != nil {
		c.logger.Errorw("error transitioning to next state", "error", err)
		return []tgbotapi.Chattable{
			tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É"),
		}
	}

	// 8. Save chat state
	if err := c.repository.UpsertChat(chat); err != nil {
		c.logger.Errorw("error saving chat", "error", err)
		return []tgbotapi.Chattable{
			tgbotapi.NewMessage(meta.ChatID, "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"),
		}
	}

	// Return prompt for next state
	nextConfig := flowConfigMap[chat.State]

	messages = append(messages, nextConfig.PromptMessage(meta.ChatID))

	return messages
}

func isGenderFillCommand(command string) bool {
	return strings.HasPrefix(command, flow.CommandFillUserConfigGender)
}

func getGenderFromCommand(command string) string {
	return strings.TrimPrefix(command, flow.CommandFillUserConfigGender)
}

func isGoalFillCommand(command string) bool {
	return strings.HasPrefix(command, flow.CommandFillDietGoal)
}

func getGoalFromCommand(command string) string {
	return strings.TrimPrefix(command, flow.CommandFillDietGoal)
}

func isActivityFillCommand(command string) bool {
	return strings.HasPrefix(command, flow.CommandFillUserConfigActivity)
}

func getActivityFromCommand(command string) string {
	return strings.TrimPrefix(command, flow.CommandFillUserConfigActivity)
}

func isDietTypeFillCommand(command string) bool {
	return strings.HasPrefix(command, flow.CommandFillUserConfigDietType)
}

func getDietTypeFromCommand(command string) string {
	return strings.TrimPrefix(command, flow.CommandFillUserConfigDietType)
}
